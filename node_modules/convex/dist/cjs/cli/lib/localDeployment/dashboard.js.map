{
  "version": 3,
  "sources": ["../../../../../src/cli/lib/localDeployment/dashboard.ts"],
  "sourcesContent": ["import { Context } from \"../../../bundler/context.js\";\nimport {\n  DashboardConfig,\n  dashboardOutDir,\n  loadDashboardConfig,\n  saveDashboardConfig,\n} from \"./filePaths.js\";\nimport { choosePorts } from \"./utils.js\";\nimport { startServer } from \"./serve.js\";\nimport { listExistingTryItOutDeployments } from \"./tryitout.js\";\nimport { localDeploymentUrl } from \"./run.js\";\nimport serveHandler from \"serve-handler\";\nimport { ensureDashboardDownloaded } from \"./download.js\";\n\nexport const DEFAULT_LOCAL_DASHBOARD_PORT = 6790;\nexport const DEFAULT_LOCAL_DASHBOARD_API_PORT = 6791;\n\nexport async function handleDashboard(ctx: Context, version: string) {\n  const config = loadDashboardConfig(ctx);\n  if (config !== null) {\n    const isRunning = await checkIfDashboardIsRunning(config);\n    if (isRunning) {\n      // It's possible this is running with a different version, but\n      // let's not worry about that for now.\n      return;\n    }\n  }\n  await ensureDashboardDownloaded(ctx, version);\n  const [dashboardPort, apiPort] = await choosePorts(ctx, {\n    count: 2,\n    startPort: DEFAULT_LOCAL_DASHBOARD_PORT,\n    requestedPorts: [null, null],\n  });\n  await saveDashboardConfig(ctx, {\n    port: dashboardPort,\n    apiPort,\n    version,\n  });\n\n  const { cleanupHandle } = await startServer(\n    ctx,\n    dashboardPort,\n    async (request, response) => {\n      await serveHandler(request, response, {\n        public: dashboardOutDir(),\n      });\n    },\n    {},\n  );\n  await startServingListDeploymentsApi(ctx, apiPort);\n  return {\n    dashboardPort,\n    cleanupHandle,\n  };\n}\n\n/**\n * This serves a really basic API that just returns a JSON blob with the deployments\n * and their credentials.\n * The locally running dashboard can hit this API.\n */\nasync function startServingListDeploymentsApi(ctx: Context, port: number) {\n  await startServer(\n    ctx,\n    port,\n    async (request, response) => {\n      const deployments = await listExistingTryItOutDeployments(ctx);\n      const deploymentsJson = deployments.map((d) => ({\n        name: d.deploymentName,\n        url: localDeploymentUrl(d.config.ports.cloud),\n        adminKey: d.config.adminKey,\n      }));\n      response.setHeader(\"Content-Type\", \"application/json\");\n      response.end(JSON.stringify({ deployments: deploymentsJson }));\n    },\n    {\n      cors: true,\n    },\n  );\n}\n\nasync function checkIfDashboardIsRunning(config: DashboardConfig) {\n  // We're checking if the mini API server is running and has a response that\n  // looks like a list of deployments, since it's easier than checking the\n  // dashboard UI.\n  let resp: Response;\n  try {\n    resp = await fetch(`http://127.0.0.1:${config.apiPort}`);\n  } catch (_e: unknown) {\n    return false;\n  }\n  if (!resp.ok) {\n    return false;\n  }\n  let data: { deployments: { name: string; url: string; adminKey: string }[] };\n  try {\n    data = await resp.json();\n  } catch (_e: unknown) {\n    return false;\n  }\n  return Array.isArray(data.deployments);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,uBAKO;AACP,mBAA4B;AAC5B,mBAA4B;AAC5B,sBAAgD;AAChD,iBAAmC;AACnC,2BAAyB;AACzB,sBAA0C;AAEnC,MAAM,+BAA+B;AACrC,MAAM,mCAAmC;AAEhD,eAAsB,gBAAgB,KAAc,SAAiB;AACnE,QAAM,aAAS,sCAAoB,GAAG;AACtC,MAAI,WAAW,MAAM;AACnB,UAAM,YAAY,MAAM,0BAA0B,MAAM;AACxD,QAAI,WAAW;AAGb;AAAA,IACF;AAAA,EACF;AACA,YAAM,2CAA0B,KAAK,OAAO;AAC5C,QAAM,CAAC,eAAe,OAAO,IAAI,UAAM,0BAAY,KAAK;AAAA,IACtD,OAAO;AAAA,IACP,WAAW;AAAA,IACX,gBAAgB,CAAC,MAAM,IAAI;AAAA,EAC7B,CAAC;AACD,YAAM,sCAAoB,KAAK;AAAA,IAC7B,MAAM;AAAA,IACN;AAAA,IACA;AAAA,EACF,CAAC;AAED,QAAM,EAAE,cAAc,IAAI,UAAM;AAAA,IAC9B;AAAA,IACA;AAAA,IACA,OAAO,SAAS,aAAa;AAC3B,gBAAM,qBAAAA,SAAa,SAAS,UAAU;AAAA,QACpC,YAAQ,kCAAgB;AAAA,MAC1B,CAAC;AAAA,IACH;AAAA,IACA,CAAC;AAAA,EACH;AACA,QAAM,+BAA+B,KAAK,OAAO;AACjD,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;AAOA,eAAe,+BAA+B,KAAc,MAAc;AACxE,YAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA,OAAO,SAAS,aAAa;AAC3B,YAAM,cAAc,UAAM,iDAAgC,GAAG;AAC7D,YAAM,kBAAkB,YAAY,IAAI,CAAC,OAAO;AAAA,QAC9C,MAAM,EAAE;AAAA,QACR,SAAK,+BAAmB,EAAE,OAAO,MAAM,KAAK;AAAA,QAC5C,UAAU,EAAE,OAAO;AAAA,MACrB,EAAE;AACF,eAAS,UAAU,gBAAgB,kBAAkB;AACrD,eAAS,IAAI,KAAK,UAAU,EAAE,aAAa,gBAAgB,CAAC,CAAC;AAAA,IAC/D;AAAA,IACA;AAAA,MACE,MAAM;AAAA,IACR;AAAA,EACF;AACF;AAEA,eAAe,0BAA0B,QAAyB;AAIhE,MAAI;AACJ,MAAI;AACF,WAAO,MAAM,MAAM,oBAAoB,OAAO,OAAO,EAAE;AAAA,EACzD,SAAS,IAAa;AACpB,WAAO;AAAA,EACT;AACA,MAAI,CAAC,KAAK,IAAI;AACZ,WAAO;AAAA,EACT;AACA,MAAI;AACJ,MAAI;AACF,WAAO,MAAM,KAAK,KAAK;AAAA,EACzB,SAAS,IAAa;AACpB,WAAO;AAAA,EACT;AACA,SAAO,MAAM,QAAQ,KAAK,WAAW;AACvC;",
  "names": ["serveHandler"]
}
