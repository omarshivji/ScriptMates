"use strict";
import {
  dashboardOutDir,
  loadDashboardConfig,
  saveDashboardConfig
} from "./filePaths.js";
import { choosePorts } from "./utils.js";
import { startServer } from "./serve.js";
import { listExistingTryItOutDeployments } from "./tryitout.js";
import { localDeploymentUrl } from "./run.js";
import serveHandler from "serve-handler";
import { ensureDashboardDownloaded } from "./download.js";
export const DEFAULT_LOCAL_DASHBOARD_PORT = 6790;
export const DEFAULT_LOCAL_DASHBOARD_API_PORT = 6791;
export async function handleDashboard(ctx, version) {
  const config = loadDashboardConfig(ctx);
  if (config !== null) {
    const isRunning = await checkIfDashboardIsRunning(config);
    if (isRunning) {
      return;
    }
  }
  await ensureDashboardDownloaded(ctx, version);
  const [dashboardPort, apiPort] = await choosePorts(ctx, {
    count: 2,
    startPort: DEFAULT_LOCAL_DASHBOARD_PORT,
    requestedPorts: [null, null]
  });
  await saveDashboardConfig(ctx, {
    port: dashboardPort,
    apiPort,
    version
  });
  const { cleanupHandle } = await startServer(
    ctx,
    dashboardPort,
    async (request, response) => {
      await serveHandler(request, response, {
        public: dashboardOutDir()
      });
    },
    {}
  );
  await startServingListDeploymentsApi(ctx, apiPort);
  return {
    dashboardPort,
    cleanupHandle
  };
}
async function startServingListDeploymentsApi(ctx, port) {
  await startServer(
    ctx,
    port,
    async (request, response) => {
      const deployments = await listExistingTryItOutDeployments(ctx);
      const deploymentsJson = deployments.map((d) => ({
        name: d.deploymentName,
        url: localDeploymentUrl(d.config.ports.cloud),
        adminKey: d.config.adminKey
      }));
      response.setHeader("Content-Type", "application/json");
      response.end(JSON.stringify({ deployments: deploymentsJson }));
    },
    {
      cors: true
    }
  );
}
async function checkIfDashboardIsRunning(config) {
  let resp;
  try {
    resp = await fetch(`http://127.0.0.1:${config.apiPort}`);
  } catch (_e) {
    return false;
  }
  if (!resp.ok) {
    return false;
  }
  let data;
  try {
    data = await resp.json();
  } catch (_e) {
    return false;
  }
  return Array.isArray(data.deployments);
}
//# sourceMappingURL=dashboard.js.map
